cmake_minimum_required(VERSION 3.8)
project(example_path_planner_plugin)

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic)
endif()

# find dependencies
find_package(ament_cmake REQUIRED)
find_package(ament_cmake_ros REQUIRED)
find_package(rclcpp REQUIRED)
find_package(planner_server REQUIRED)
find_package(pluginlib REQUIRED)

pluginlib_export_plugin_description_file(planner_server plugins.xml)

add_library(example_path_planner_plugin src/example_path_planner_plugin.cpp)
target_compile_features(example_path_planner_plugin PUBLIC c_std_99 cxx_std_17)  # Require C99 and C++17
target_include_directories(example_path_planner_plugin PUBLIC
  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
  $<INSTALL_INTERFACE:include>)
ament_target_dependencies(
  example_path_planner_plugin
  "rclcpp"
  "planner_server"
  "pluginlib"
)

# Causes the visibility macros to use dllexport rather than dllimport,
# which is appropriate when building the dll but not consuming it.
target_compile_definitions(example_path_planner_plugin PRIVATE "EXAMPLE_PATH_PLANNER_PLUGIN_BUILDING_LIBRARY")

install(
  DIRECTORY include/
  DESTINATION include
)
install(
  TARGETS example_path_planner_plugin
  EXPORT export_${PROJECT_NAME}
  ARCHIVE DESTINATION lib
  LIBRARY DESTINATION lib
  RUNTIME DESTINATION bin
)

ament_export_include_directories(
  include
)
ament_export_libraries(
  example_path_planner_plugin
)
ament_export_targets(
  export_${PROJECT_NAME}
)

ament_package()
